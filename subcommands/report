#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_AVAILABLE_PATH/config/functions"
source "$PLUGIN_AVAILABLE_PATH/image-size-limit/functions"

cmd-image-size-limit-report() {
  declare desc="Check the current image size limit."
  declare cmd="image-size-limit:report"

  [[ "$1" == "image-size-limit:report" ]] || return 1

  # if second argument is not empty or --global, it must be an app name
  if [[ -n "$2" && "$2" != "--global" ]]; then
    verify_app_name "$2"
    local limit=$(config_get "$2" DOKKU_IMAGE_SIZE_LIMIT)
    if [[ -z "$limit" ]]; then
      local global_limit=$(config_get --global DOKKU_IMAGE_SIZE_LIMIT)
      if [[ -z "$global_limit" ]]; then
        echo "No limit set for $2 or globally"
        return 0
      fi
      echo "Image size limit for $2 is $(fn-format-size "$global_limit") (global)"
      return 0
    fi
    echo "Image size limit for $2 is $(fn-format-size "$limit")"
    return 0
  fi

  # find app with longest name to format the table
  local longest_app_name_length=0
  for app in $(dokku_apps); do
    if [[ ${#app} -gt $longest_app_name_length ]]; then
      longest_app_name_length=${#app}
    fi
  done

  # iterate over installed apps and display their DOKKU_IMAGE_SIZE_LIMIT config. If it doesn't exist, display the global limit with a note
  for app in $(dokku_apps); do
    local limit=$(config_get "$app" DOKKU_IMAGE_SIZE_LIMIT)
    if [[ -z "$limit" ]]; then
      local global_limit=$(config_get --global DOKKU_IMAGE_SIZE_LIMIT)
      if [[ -z "$global_limit" ]]; then
        printf "%-${longest_app_name_length}s No limit set\n" "$app"
        continue
      fi
      local global_limit_human=$(fn-format-size "$global_limit")
      printf "%-${longest_app_name_length}s %-20s\n" "$app" "$global_limit_human (global)"
    else
      local limit_human=$(fn-format-size "$limit")
      printf "%-${longest_app_name_length}s %-20s\n" "$app" "$limit_human"
    fi
  done
}

cmd-image-size-limit-report "$@"
